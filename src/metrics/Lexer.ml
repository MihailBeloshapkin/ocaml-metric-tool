# 1 "Lexer.mll"
 
  let num_lines = ref 1
  let num_chars = ref 0
  let num_empty = ref 0
  let num_comm_lines = ref 0
  let num_llines = ref 0

# 10 "Lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\250\255\251\255\252\255\002\000\002\000\255\255\254\255\
    \005\000\007\000\251\255\252\255\253\255\000\000\006\000\255\255\
    \254\255\018\000\251\255\252\255\254\255\255\255\009\000\253\255\
    ";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\002\000\004\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\003\000\003\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    ";
  Lexing.lex_default =
   "\002\000\000\000\000\000\000\000\255\255\255\255\000\000\000\000\
    \255\255\011\000\000\000\000\000\000\000\255\255\255\255\000\000\
    \000\000\019\000\000\000\000\000\000\000\000\000\255\255\000\000\
    ";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\003\000\004\000\008\000\007\000\000\000\008\000\007\000\
    \000\000\012\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\021\000\020\000\000\000\000\000\000\000\
    \003\000\000\000\008\000\000\000\000\000\008\000\000\000\000\000\
    \005\000\016\000\008\000\008\000\006\000\008\000\008\000\014\000\
    \015\000\013\000\021\000\023\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\022\000\021\000\000\000\008\000\000\000\000\000\
    \008\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\008\000\000\000\008\000\
    \008\000\000\000\008\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\021\000\000\000\021\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\021\000\000\000\021\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\000\000\000\000\000\000\000\000\000\000\010\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\018\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\004\000\004\000\255\255\008\000\008\000\
    \255\255\009\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\017\000\017\000\255\255\255\255\255\255\
    \000\000\255\255\004\000\255\255\255\255\008\000\255\255\255\255\
    \000\000\013\000\004\000\004\000\005\000\008\000\008\000\009\000\
    \014\000\009\000\017\000\022\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\017\000\017\000\255\255\004\000\255\255\255\255\
    \008\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\004\000\255\255\004\000\
    \008\000\255\255\008\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\017\000\255\255\017\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\004\000\004\000\004\000\
    \008\000\008\000\008\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\017\000\255\255\017\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\009\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\017\000";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec scan is_non_logic lexbuf =
   __ocaml_lex_scan_rec is_non_logic lexbuf 0
and __ocaml_lex_scan_rec is_non_logic lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 12 "Lexer.mll"
                 ( incr num_comm_lines; comments 0  is_non_logic lexbuf )
# 120 "Lexer.ml"

  | 1 ->
# 13 "Lexer.mll"
                 ( num_lines := !num_lines + 2;
                   if not is_non_logic then incr num_llines;
                   incr num_empty;
                   empty 0 lexbuf )
# 128 "Lexer.ml"

  | 2 ->
# 17 "Lexer.mll"
                 ( incr num_lines; 
                   if not is_non_logic then incr num_llines;
                   scan true lexbuf )
# 135 "Lexer.ml"

  | 3 ->
# 20 "Lexer.mll"
                 ( incr num_chars; scan is_non_logic lexbuf )
# 140 "Lexer.ml"

  | 4 ->
# 21 "Lexer.mll"
                 ( incr num_chars; scan false lexbuf )
# 145 "Lexer.ml"

  | 5 ->
# 22 "Lexer.mll"
                 ( () )
# 150 "Lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_scan_rec is_non_logic lexbuf __ocaml_lex_state

and comments level is_nline lexbuf =
   __ocaml_lex_comments_rec level is_nline lexbuf 9
and __ocaml_lex_comments_rec level is_nline lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 24 "Lexer.mll"
                 ( comments (level + 1) is_nline lexbuf )
# 162 "Lexer.ml"

  | 1 ->
# 25 "Lexer.mll"
                 ( if level = 0 then (scan is_nline lexbuf)
                   else
                     comments (level - 1) is_nline lexbuf )
# 169 "Lexer.ml"

  | 2 ->
# 28 "Lexer.mll"
                 ( incr num_lines; incr num_comm_lines; comments level  true lexbuf )
# 174 "Lexer.ml"

  | 3 ->
let
# 29 "Lexer.mll"
         c
# 180 "Lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 29 "Lexer.mll"
                 ( comments level is_nline lexbuf )
# 184 "Lexer.ml"

  | 4 ->
# 30 "Lexer.mll"
                 ( () )
# 189 "Lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comments_rec level is_nline lexbuf __ocaml_lex_state

and empty acc lexbuf =
   __ocaml_lex_empty_rec acc lexbuf 17
and __ocaml_lex_empty_rec acc lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 32 "Lexer.mll"
                                        ( empty acc lexbuf )
# 201 "Lexer.ml"

  | 1 ->
# 33 "Lexer.mll"
                                        ( incr num_lines; empty (acc + 1) lexbuf )
# 206 "Lexer.ml"

  | 2 ->
# 34 "Lexer.mll"
                                        ( incr num_comm_lines; (num_empty := !num_empty + acc); comments 0 true lexbuf )
# 211 "Lexer.ml"

  | 3 ->
# 35 "Lexer.mll"
                                        ( (num_empty := !num_empty + acc); scan false lexbuf )
# 216 "Lexer.ml"

  | 4 ->
# 36 "Lexer.mll"
                                        ( () )
# 221 "Lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_empty_rec acc lexbuf __ocaml_lex_state

;;

# 38 "Lexer.mll"
 
  let process source =
    num_lines := 1;
    num_chars := 0;
    num_empty := 0;
    num_comm_lines := 0;
    num_llines := 0;
    let lexbuf = Lexing.from_string source in
    scan true lexbuf;

    (!num_empty, !num_lines, !num_comm_lines, !num_llines)

# 241 "Lexer.ml"
